// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: session.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO
    sessions (
        session_id,
        user_id,
        token,
        created_at,
        expires_at,
        last_activity,
        ip_address,
        user_agent,
        is_active,
        revoked_at,
        otp_verified,
        otp_expires_at,
        otp_attempts,
        otp,
        device_info
    )
VALUES (
        $1, -- session_id (unique identifier for the session, UUID)
        $2, -- user_id (UUID of the associated user)
        $3, -- token (session or refresh token for authentication)
        now(), -- created_at (timestamp for when session is created)
        $4, -- expires_at (timestamp for when session expires)
        $5, -- last_activity (timestamp for last user activity)
        $6, -- ip_address (IP address of the client)
        $7, -- user_agent (device or browser information)
        $8, -- is_active (boolean to indicate if the session is active)
        $9, -- revoked_at (timestamp for when session is revoked, if applicable)
        $10,
        $11,
        $12,
        $13,
        $14
    ) RETURNING session_id, user_id, token, otp, otp_expires_at, otp_attempts, otp_verified, created_at, expires_at, last_activity, ip_address, user_agent, is_active, revoked_at, device_info
`

type CreateSessionParams struct {
	SessionID    uuid.UUID             `json:"session_id"`
	UserID       uuid.UUID             `json:"user_id"`
	Token        string                `json:"token"`
	ExpiresAt    time.Time             `json:"expires_at"`
	LastActivity time.Time             `json:"last_activity"`
	IpAddress    sql.NullString        `json:"ip_address"`
	UserAgent    sql.NullString        `json:"user_agent"`
	IsActive     bool                  `json:"is_active"`
	RevokedAt    sql.NullTime          `json:"revoked_at"`
	OtpVerified  sql.NullBool          `json:"otp_verified"`
	OtpExpiresAt sql.NullTime          `json:"otp_expires_at"`
	OtpAttempts  sql.NullInt32         `json:"otp_attempts"`
	Otp          sql.NullString        `json:"otp"`
	DeviceInfo   pqtype.NullRawMessage `json:"device_info"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Sessions, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.SessionID,
		arg.UserID,
		arg.Token,
		arg.ExpiresAt,
		arg.LastActivity,
		arg.IpAddress,
		arg.UserAgent,
		arg.IsActive,
		arg.RevokedAt,
		arg.OtpVerified,
		arg.OtpExpiresAt,
		arg.OtpAttempts,
		arg.Otp,
		arg.DeviceInfo,
	)
	var i Sessions
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.Token,
		&i.Otp,
		&i.OtpExpiresAt,
		&i.OtpAttempts,
		&i.OtpVerified,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.LastActivity,
		&i.IpAddress,
		&i.UserAgent,
		&i.IsActive,
		&i.RevokedAt,
		&i.DeviceInfo,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE session_id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, sessionID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, sessionID)
	return err
}

const getSession = `-- name: GetSession :one
SELECT session_id, user_id, token, otp, otp_expires_at, otp_attempts, otp_verified, created_at, expires_at, last_activity, ip_address, user_agent, is_active, revoked_at, device_info FROM sessions 
WHERE session_id = $1 
   OR user_id = $1
`

func (q *Queries) GetSession(ctx context.Context, sessionID uuid.UUID) (Sessions, error) {
	row := q.db.QueryRowContext(ctx, getSession, sessionID)
	var i Sessions
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.Token,
		&i.Otp,
		&i.OtpExpiresAt,
		&i.OtpAttempts,
		&i.OtpVerified,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.LastActivity,
		&i.IpAddress,
		&i.UserAgent,
		&i.IsActive,
		&i.RevokedAt,
		&i.DeviceInfo,
	)
	return i, err
}

const revokeSession = `-- name: RevokeSession :exec
UPDATE sessions
SET
    is_active = false,
    revoked_at = now()
WHERE
    session_id = $1
`

func (q *Queries) RevokeSession(ctx context.Context, sessionID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, revokeSession, sessionID)
	return err
}

const updateSession = `-- name: UpdateSession :one
UPDATE sessions
SET
    token = COALESCE($1, token),
    otp = COALESCE($2, otp),
    otp_expires_at = COALESCE($3, otp_expires_at),
    otp_attempts = COALESCE($4, otp_attempts),
    expires_at = COALESCE($5, expires_at),
    last_activity = COALESCE($6, last_activity),
    ip_address = COALESCE($7, ip_address),
    user_agent = COALESCE($8, user_agent),
    is_active = COALESCE($9, is_active),
    revoked_at = COALESCE($10, revoked_at),
    otp_verified = COALESCE($11, otp_verified),
    device_info = COALESCE($12, device_info)
WHERE
    user_id = $13 RETURNING session_id, user_id, token, otp, otp_expires_at, otp_attempts, otp_verified, created_at, expires_at, last_activity, ip_address, user_agent, is_active, revoked_at, device_info
`

type UpdateSessionParams struct {
	Token        string                `json:"token"`
	Otp          sql.NullString        `json:"otp"`
	OtpExpiresAt sql.NullTime          `json:"otp_expires_at"`
	OtpAttempts  sql.NullInt32         `json:"otp_attempts"`
	ExpiresAt    time.Time             `json:"expires_at"`
	LastActivity time.Time             `json:"last_activity"`
	IpAddress    sql.NullString        `json:"ip_address"`
	UserAgent    sql.NullString        `json:"user_agent"`
	IsActive     bool                  `json:"is_active"`
	RevokedAt    sql.NullTime          `json:"revoked_at"`
	OtpVerified  sql.NullBool          `json:"otp_verified"`
	DeviceInfo   pqtype.NullRawMessage `json:"device_info"`
	UserID       uuid.UUID             `json:"user_id"`
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (Sessions, error) {
	row := q.db.QueryRowContext(ctx, updateSession,
		arg.Token,
		arg.Otp,
		arg.OtpExpiresAt,
		arg.OtpAttempts,
		arg.ExpiresAt,
		arg.LastActivity,
		arg.IpAddress,
		arg.UserAgent,
		arg.IsActive,
		arg.RevokedAt,
		arg.OtpVerified,
		arg.DeviceInfo,
		arg.UserID,
	)
	var i Sessions
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.Token,
		&i.Otp,
		&i.OtpExpiresAt,
		&i.OtpAttempts,
		&i.OtpVerified,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.LastActivity,
		&i.IpAddress,
		&i.UserAgent,
		&i.IsActive,
		&i.RevokedAt,
		&i.DeviceInfo,
	)
	return i, err
}

const updateSessionActivity = `-- name: UpdateSessionActivity :exec
UPDATE sessions
SET
    last_activity = $1,
    is_active = $2
WHERE
    session_id = $3
`

type UpdateSessionActivityParams struct {
	LastActivity time.Time `json:"last_activity"`
	IsActive     bool      `json:"is_active"`
	SessionID    uuid.UUID `json:"session_id"`
}

func (q *Queries) UpdateSessionActivity(ctx context.Context, arg UpdateSessionActivityParams) error {
	_, err := q.db.ExecContext(ctx, updateSessionActivity, arg.LastActivity, arg.IsActive, arg.SessionID)
	return err
}
