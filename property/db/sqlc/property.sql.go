// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: property.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
	"github.com/sqlc-dev/pqtype"
)

const deleteProperty = `-- name: DeleteProperty :exec
DELETE FROM "Property"
WHERE id = $1
`

func (q *Queries) DeleteProperty(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProperty, id)
	return err
}

const getPropertiesByOwnerID = `-- name: GetPropertiesByOwnerID :many
SELECT id, title, description, price, type, address, zip_code, owner_id, images, no_of_bed_rooms, no_of_bath_rooms, no_of_toilets, geo_location, status, created_at, updated_at FROM "Property"
WHERE owner_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetPropertiesByOwnerIDParams struct {
	OwnerID uuid.NullUUID `json:"owner_id"`
	Limit   int32         `json:"limit"`
	Offset  int32         `json:"offset"`
}

func (q *Queries) GetPropertiesByOwnerID(ctx context.Context, arg GetPropertiesByOwnerIDParams) ([]Property, error) {
	rows, err := q.db.QueryContext(ctx, getPropertiesByOwnerID, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Property{}
	for rows.Next() {
		var i Property
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.Type,
			&i.Address,
			&i.ZipCode,
			&i.OwnerID,
			pq.Array(&i.Images),
			&i.NoOfBedRooms,
			&i.NoOfBathRooms,
			&i.NoOfToilets,
			&i.GeoLocation,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPropertyByID = `-- name: GetPropertyByID :one
SELECT id, title, description, price, type, address, zip_code, owner_id, images, no_of_bed_rooms, no_of_bath_rooms, no_of_toilets, geo_location, status, created_at, updated_at FROM "Property"
WHERE id = $1
`

func (q *Queries) GetPropertyByID(ctx context.Context, id uuid.UUID) (Property, error) {
	row := q.db.QueryRowContext(ctx, getPropertyByID, id)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Price,
		&i.Type,
		&i.Address,
		&i.ZipCode,
		&i.OwnerID,
		pq.Array(&i.Images),
		&i.NoOfBedRooms,
		&i.NoOfBathRooms,
		&i.NoOfToilets,
		&i.GeoLocation,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertProperty = `-- name: InsertProperty :one
INSERT INTO "Property" (
    id, title, description, price, type, address, zip_code, owner_id, images, 
    no_of_bed_rooms, no_of_bath_rooms, no_of_toilets, geo_location, status, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, 
    $10, $11, $12, $13, $14, now(), now()
)
RETURNING id, title, description, price, type, address, zip_code, owner_id, images, no_of_bed_rooms, no_of_bath_rooms, no_of_toilets, geo_location, status, created_at, updated_at
`

type InsertPropertyParams struct {
	ID            uuid.UUID             `json:"id"`
	Title         string                `json:"title"`
	Description   sql.NullString        `json:"description"`
	Price         string                `json:"price"`
	Type          NullPropertyType      `json:"type"`
	Address       string                `json:"address"`
	ZipCode       sql.NullString        `json:"zip_code"`
	OwnerID       uuid.NullUUID         `json:"owner_id"`
	Images        []string              `json:"images"`
	NoOfBedRooms  sql.NullInt32         `json:"no_of_bed_rooms"`
	NoOfBathRooms sql.NullInt32         `json:"no_of_bath_rooms"`
	NoOfToilets   sql.NullInt32         `json:"no_of_toilets"`
	GeoLocation   pqtype.NullRawMessage `json:"geo_location"`
	Status        NullPropertyStatus    `json:"status"`
}

func (q *Queries) InsertProperty(ctx context.Context, arg InsertPropertyParams) (Property, error) {
	row := q.db.QueryRowContext(ctx, insertProperty,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Price,
		arg.Type,
		arg.Address,
		arg.ZipCode,
		arg.OwnerID,
		pq.Array(arg.Images),
		arg.NoOfBedRooms,
		arg.NoOfBathRooms,
		arg.NoOfToilets,
		arg.GeoLocation,
		arg.Status,
	)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Price,
		&i.Type,
		&i.Address,
		&i.ZipCode,
		&i.OwnerID,
		pq.Array(&i.Images),
		&i.NoOfBedRooms,
		&i.NoOfBathRooms,
		&i.NoOfToilets,
		&i.GeoLocation,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProperties = `-- name: ListProperties :many
SELECT id, title, description, price, type, address, zip_code, owner_id, images, no_of_bed_rooms, no_of_bath_rooms, no_of_toilets, geo_location, status, created_at, updated_at FROM "Property"
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListPropertiesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProperties(ctx context.Context, arg ListPropertiesParams) ([]Property, error) {
	rows, err := q.db.QueryContext(ctx, listProperties, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Property{}
	for rows.Next() {
		var i Property
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.Type,
			&i.Address,
			&i.ZipCode,
			&i.OwnerID,
			pq.Array(&i.Images),
			&i.NoOfBedRooms,
			&i.NoOfBathRooms,
			&i.NoOfToilets,
			&i.GeoLocation,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProperty = `-- name: UpdateProperty :exec
UPDATE "Property"
SET 
    title = COALESCE($2, title),
    description = COALESCE($3, description),
    price = COALESCE($4, price),
    type = COALESCE($5, type),
    address = COALESCE($6, address),
    zip_code = COALESCE($7, zip_code),
    images = COALESCE($8, images),
    no_of_bed_rooms = COALESCE($9, no_of_bed_rooms),
    no_of_bath_rooms = COALESCE($10, no_of_bath_rooms),
    no_of_toilets = COALESCE($11, no_of_toilets),
    geo_location = COALESCE($12, geo_location),
    status = COALESCE($13, status),
    updated_at = now()
WHERE id = $1
`

type UpdatePropertyParams struct {
	ID            uuid.UUID             `json:"id"`
	Title         string                `json:"title"`
	Description   sql.NullString        `json:"description"`
	Price         string                `json:"price"`
	Type          NullPropertyType      `json:"type"`
	Address       string                `json:"address"`
	ZipCode       sql.NullString        `json:"zip_code"`
	Images        []string              `json:"images"`
	NoOfBedRooms  sql.NullInt32         `json:"no_of_bed_rooms"`
	NoOfBathRooms sql.NullInt32         `json:"no_of_bath_rooms"`
	NoOfToilets   sql.NullInt32         `json:"no_of_toilets"`
	GeoLocation   pqtype.NullRawMessage `json:"geo_location"`
	Status        NullPropertyStatus    `json:"status"`
}

func (q *Queries) UpdateProperty(ctx context.Context, arg UpdatePropertyParams) error {
	_, err := q.db.ExecContext(ctx, updateProperty,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Price,
		arg.Type,
		arg.Address,
		arg.ZipCode,
		pq.Array(arg.Images),
		arg.NoOfBedRooms,
		arg.NoOfBathRooms,
		arg.NoOfToilets,
		arg.GeoLocation,
		arg.Status,
	)
	return err
}
